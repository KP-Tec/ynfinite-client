/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_cookieManager_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _scss_cookieManager_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_cookieManager_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scss_formGrid_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _scss_formGrid_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scss_formGrid_scss__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _scss_article_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _scss_article_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_scss_article_scss__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_general__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _js_general__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_general__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _js_lazysize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _js_lazysize__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_lazysize__WEBPACK_IMPORTED_MODULE_4__);
//SCSS Files


 //JS Files




const YnfiniteCookies = __webpack_require__(6);

const YnfiniteForms = __webpack_require__(7);

YnfiniteCookies.setup();
YnfiniteForms.setup();
window.$_yn = {
  forms: {
    updateUrl: YnfiniteForms.updateUrl,
    repopulate: YnfiniteForms.repopulateForm,
    enable: YnfiniteForms.enableForm,
    disable: YnfiniteForms.disableForm,
    showResponse: YnfiniteForms.showResponse
  }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 4 */
/***/ (function(module, exports) {

function handleResponse(e, t) {
  t.json().then(t => {
    const {
      success,
      error,
      inline: n,
      redirect: o,
      type: i
    } = t;

    if (success) {
      "information" === i && (e.innerHTML = n[0].template), "redirect" === i && window.location.replace(o), "inline" === i && n.forEach(e => {
        if (e.selector) {
          const t = e.selector.substring(1);

          if ("." === e.selector.charAt(0)) {
            document.getElementsByClassName(t).forEach(t => {
              t.innerHTML = e.template;
            });
          }

          if ("#" === e.selector.charAt(0)) {
            document.getElementsByClassName(t).innerHTML = e.template;
          }
        }
      });
    } else {
      const errorContainer = e.querySelector(".yn-error");
      errorContainer.innerHTML = "<ul><li data-status='" + error.status + "'>" + error.message + "</li></ul>";
    }
  });
}

function functSubmit(e) {
  e.preventDefault();
  const t = e.target,
        n = new FormData(t),
        o = e.target.getAttribute("data-ynfiniteid"),
        i = e.target.getAttribute("data-ynfinitelang"),
        c = e.target.getAttribute("data-ynfinite-content"),
        s = e.target.getAttribute("data-ynfinite-section"),
        sp = e.target.getAttribute("data-ynfinite-slugprefix");
  n.append("formId", o), n.append("lang", i), n.append("prefix", sp), n.append("contentId", c), n.append("sectionId", s), n.append("action", "submit");
  fetch(t.action, {
    method: t.method,
    body: n
  }).then(handleResponse.bind(null, t)), e.preventDefault();
}

function functOnInput(e) {
  const {
    form: t
  } = e.target,
        n = new FormData(t),
        o = t.getAttribute("data-ynfiniteid"),
        i = t.getAttribute("data-ynfinitelang");
  n.append("formId", o), n.append("lang", i), n.append("action", "change"), ("insertText" === e.inputType && e.target.value.length > 3 || "insertText" !== e.inputType) && fetch(t.action, {
    method: t.method,
    body: n
  }).then(handleResponse.bind(null, t)), e.preventDefault();
}

const forms = document.querySelectorAll('*[data-ynfiniteform="true"]');

for (const e of forms) e.addEventListener("submit", functSubmit);

const onChangeForms = document.querySelectorAll('*[data-ynfiniteform-onchange="true"]');
onChangeForms.forEach(function (e) {
  for (var t, n = 0; t = e.elements[n++];) t.addEventListener("input", functOnInput);
});
const buttons = document.querySelectorAll(".gdpr-button");

for (const e of buttons) e.addEventListener("click", function (e) {
  e.preventDefault();
  const t = e.target.getAttribute("data-formid"),
        n = e.target.getAttribute("data-formaction"),
        o = document.getElementById(t),
        i = new FormData(o);
  fetch(n || o.action, {
    method: o.method,
    body: i
  }).then(e => {
    200 === e.status && e.json().then(e => {
      o.innerHTML = `<div class="response">${e.message}</div>`;
    });
  });
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/*! lazysizes - v5.2.2 */
!function (e) {
  var t = function (u, D, f) {
    "use strict";

    var k, H;

    if (function () {
      var e;
      var t = {
        lazyClass: "lazyload",
        loadedClass: "lazyloaded",
        loadingClass: "lazyloading",
        preloadClass: "lazypreload",
        errorClass: "lazyerror",
        autosizesClass: "lazyautosizes",
        srcAttr: "data-src",
        srcsetAttr: "data-srcset",
        sizesAttr: "data-sizes",
        minSize: 40,
        customMedia: {},
        init: true,
        expFactor: 1.5,
        hFac: .8,
        loadMode: 2,
        loadHidden: true,
        ricTimeout: 0,
        throttleDelay: 125
      };
      H = u.lazySizesConfig || u.lazysizesConfig || {};

      for (e in t) {
        if (!(e in H)) {
          H[e] = t[e];
        }
      }
    }(), !D || !D.getElementsByClassName) {
      return {
        init: function () {},
        cfg: H,
        noSupport: true
      };
    }

    var O = D.documentElement,
        a = u.HTMLPictureElement,
        P = "addEventListener",
        $ = "getAttribute",
        q = u[P].bind(u),
        I = u.setTimeout,
        U = u.requestAnimationFrame || I,
        l = u.requestIdleCallback,
        j = /^picture$/i,
        r = ["load", "error", "lazyincluded", "_lazyloaded"],
        i = {},
        G = Array.prototype.forEach,
        J = function (e, t) {
      if (!i[t]) {
        i[t] = new RegExp("(\\s|^)" + t + "(\\s|$)");
      }

      return i[t].test(e[$]("class") || "") && i[t];
    },
        K = function (e, t) {
      if (!J(e, t)) {
        e.setAttribute("class", (e[$]("class") || "").trim() + " " + t);
      }
    },
        Q = function (e, t) {
      var i;

      if (i = J(e, t)) {
        e.setAttribute("class", (e[$]("class") || "").replace(i, " "));
      }
    },
        V = function (t, i, e) {
      var a = e ? P : "removeEventListener";

      if (e) {
        V(t, i);
      }

      r.forEach(function (e) {
        t[a](e, i);
      });
    },
        X = function (e, t, i, a, r) {
      var n = D.createEvent("Event");

      if (!i) {
        i = {};
      }

      i.instance = k;
      n.initEvent(t, !a, !r);
      n.detail = i;
      e.dispatchEvent(n);
      return n;
    },
        Y = function (e, t) {
      var i;

      if (!a && (i = u.picturefill || H.pf)) {
        if (t && t.src && !e[$]("srcset")) {
          e.setAttribute("srcset", t.src);
        }

        i({
          reevaluate: true,
          elements: [e]
        });
      } else if (t && t.src) {
        e.src = t.src;
      }
    },
        Z = function (e, t) {
      return (getComputedStyle(e, null) || {})[t];
    },
        s = function (e, t, i) {
      i = i || e.offsetWidth;

      while (i < H.minSize && t && !e._lazysizesWidth) {
        i = t.offsetWidth;
        t = t.parentNode;
      }

      return i;
    },
        ee = function () {
      var i, a;
      var t = [];
      var r = [];
      var n = t;

      var s = function () {
        var e = n;
        n = t.length ? r : t;
        i = true;
        a = false;

        while (e.length) {
          e.shift()();
        }

        i = false;
      };

      var e = function (e, t) {
        if (i && !t) {
          e.apply(this, arguments);
        } else {
          n.push(e);

          if (!a) {
            a = true;
            (D.hidden ? I : U)(s);
          }
        }
      };

      e._lsFlush = s;
      return e;
    }(),
        te = function (i, e) {
      return e ? function () {
        ee(i);
      } : function () {
        var e = this;
        var t = arguments;
        ee(function () {
          i.apply(e, t);
        });
      };
    },
        ie = function (e) {
      var i;
      var a = 0;
      var r = H.throttleDelay;
      var n = H.ricTimeout;

      var t = function () {
        i = false;
        a = f.now();
        e();
      };

      var s = l && n > 49 ? function () {
        l(t, {
          timeout: n
        });

        if (n !== H.ricTimeout) {
          n = H.ricTimeout;
        }
      } : te(function () {
        I(t);
      }, true);
      return function (e) {
        var t;

        if (e = e === true) {
          n = 33;
        }

        if (i) {
          return;
        }

        i = true;
        t = r - (f.now() - a);

        if (t < 0) {
          t = 0;
        }

        if (e || t < 9) {
          s();
        } else {
          I(s, t);
        }
      };
    },
        ae = function (e) {
      var t, i;
      var a = 99;

      var r = function () {
        t = null;
        e();
      };

      var n = function () {
        var e = f.now() - i;

        if (e < a) {
          I(n, a - e);
        } else {
          (l || r)(r);
        }
      };

      return function () {
        i = f.now();

        if (!t) {
          t = I(n, a);
        }
      };
    },
        e = function () {
      var v, m, c, h, e;
      var y, z, g, p, C, b, A;
      var n = /^img$/i;
      var d = /^iframe$/i;
      var E = "onscroll" in u && !/(gle|ing)bot/.test(navigator.userAgent);
      var _ = 0;
      var w = 0;
      var N = 0;
      var M = -1;

      var x = function (e) {
        N--;

        if (!e || N < 0 || !e.target) {
          N = 0;
        }
      };

      var W = function (e) {
        if (A == null) {
          A = Z(D.body, "visibility") == "hidden";
        }

        return A || !(Z(e.parentNode, "visibility") == "hidden" && Z(e, "visibility") == "hidden");
      };

      var S = function (e, t) {
        var i;
        var a = e;
        var r = W(e);
        g -= t;
        b += t;
        p -= t;
        C += t;

        while (r && (a = a.offsetParent) && a != D.body && a != O) {
          r = (Z(a, "opacity") || 1) > 0;

          if (r && Z(a, "overflow") != "visible") {
            i = a.getBoundingClientRect();
            r = C > i.left && p < i.right && b > i.top - 1 && g < i.bottom + 1;
          }
        }

        return r;
      };

      var t = function () {
        var e, t, i, a, r, n, s, l, o, u, f, c;
        var d = k.elements;

        if ((h = H.loadMode) && N < 8 && (e = d.length)) {
          t = 0;
          M++;

          for (; t < e; t++) {
            if (!d[t] || d[t]._lazyRace) {
              continue;
            }

            if (!E || k.prematureUnveil && k.prematureUnveil(d[t])) {
              R(d[t]);
              continue;
            }

            if (!(l = d[t][$]("data-expand")) || !(n = l * 1)) {
              n = w;
            }

            if (!u) {
              u = !H.expand || H.expand < 1 ? O.clientHeight > 500 && O.clientWidth > 500 ? 500 : 370 : H.expand;
              k._defEx = u;
              f = u * H.expFactor;
              c = H.hFac;
              A = null;

              if (w < f && N < 1 && M > 2 && h > 2 && !D.hidden) {
                w = f;
                M = 0;
              } else if (h > 1 && M > 1 && N < 6) {
                w = u;
              } else {
                w = _;
              }
            }

            if (o !== n) {
              y = innerWidth + n * c;
              z = innerHeight + n;
              s = n * -1;
              o = n;
            }

            i = d[t].getBoundingClientRect();

            if ((b = i.bottom) >= s && (g = i.top) <= z && (C = i.right) >= s * c && (p = i.left) <= y && (b || C || p || g) && (H.loadHidden || W(d[t])) && (m && N < 3 && !l && (h < 3 || M < 4) || S(d[t], n))) {
              R(d[t]);
              r = true;

              if (N > 9) {
                break;
              }
            } else if (!r && m && !a && N < 4 && M < 4 && h > 2 && (v[0] || H.preloadAfterLoad) && (v[0] || !l && (b || C || p || g || d[t][$](H.sizesAttr) != "auto"))) {
              a = v[0] || d[t];
            }
          }

          if (a && !r) {
            R(a);
          }
        }
      };

      var i = ie(t);

      var B = function (e) {
        var t = e.target;

        if (t._lazyCache) {
          delete t._lazyCache;
          return;
        }

        x(e);
        K(t, H.loadedClass);
        Q(t, H.loadingClass);
        V(t, L);
        X(t, "lazyloaded");
      };

      var a = te(B);

      var L = function (e) {
        a({
          target: e.target
        });
      };

      var T = function (t, i) {
        try {
          t.contentWindow.location.replace(i);
        } catch (e) {
          t.src = i;
        }
      };

      var F = function (e) {
        var t;
        var i = e[$](H.srcsetAttr);

        if (t = H.customMedia[e[$]("data-media") || e[$]("media")]) {
          e.setAttribute("media", t);
        }

        if (i) {
          e.setAttribute("srcset", i);
        }
      };

      var s = te(function (t, e, i, a, r) {
        var n, s, l, o, u, f;

        if (!(u = X(t, "lazybeforeunveil", e)).defaultPrevented) {
          if (a) {
            if (i) {
              K(t, H.autosizesClass);
            } else {
              t.setAttribute("sizes", a);
            }
          }

          s = t[$](H.srcsetAttr);
          n = t[$](H.srcAttr);

          if (r) {
            l = t.parentNode;
            o = l && j.test(l.nodeName || "");
          }

          f = e.firesLoad || "src" in t && (s || n || o);
          u = {
            target: t
          };
          K(t, H.loadingClass);

          if (f) {
            clearTimeout(c);
            c = I(x, 2500);
            V(t, L, true);
          }

          if (o) {
            G.call(l.getElementsByTagName("source"), F);
          }

          if (s) {
            t.setAttribute("srcset", s);
          } else if (n && !o) {
            if (d.test(t.nodeName)) {
              T(t, n);
            } else {
              t.src = n;
            }
          }

          if (r && (s || o)) {
            Y(t, {
              src: n
            });
          }
        }

        if (t._lazyRace) {
          delete t._lazyRace;
        }

        Q(t, H.lazyClass);
        ee(function () {
          var e = t.complete && t.naturalWidth > 1;

          if (!f || e) {
            if (e) {
              K(t, "ls-is-cached");
            }

            B(u);
            t._lazyCache = true;
            I(function () {
              if ("_lazyCache" in t) {
                delete t._lazyCache;
              }
            }, 9);
          }

          if (t.loading == "lazy") {
            N--;
          }
        }, true);
      });

      var R = function (e) {
        if (e._lazyRace) {
          return;
        }

        var t;
        var i = n.test(e.nodeName);
        var a = i && (e[$](H.sizesAttr) || e[$]("sizes"));
        var r = a == "auto";

        if ((r || !m) && i && (e[$]("src") || e.srcset) && !e.complete && !J(e, H.errorClass) && J(e, H.lazyClass)) {
          return;
        }

        t = X(e, "lazyunveilread").detail;

        if (r) {
          re.updateElem(e, true, e.offsetWidth);
        }

        e._lazyRace = true;
        N++;
        s(e, t, r, a, i);
      };

      var r = ae(function () {
        H.loadMode = 3;
        i();
      });

      var l = function () {
        if (H.loadMode == 3) {
          H.loadMode = 2;
        }

        r();
      };

      var o = function () {
        if (m) {
          return;
        }

        if (f.now() - e < 999) {
          I(o, 999);
          return;
        }

        m = true;
        H.loadMode = 3;
        i();
        q("scroll", l, true);
      };

      return {
        _: function () {
          e = f.now();
          k.elements = D.getElementsByClassName(H.lazyClass);
          v = D.getElementsByClassName(H.lazyClass + " " + H.preloadClass);
          q("scroll", i, true);
          q("resize", i, true);
          q("pageshow", function (e) {
            if (e.persisted) {
              var t = D.querySelectorAll("." + H.loadingClass);

              if (t.length && t.forEach) {
                U(function () {
                  t.forEach(function (e) {
                    if (e.complete) {
                      R(e);
                    }
                  });
                });
              }
            }
          });

          if (u.MutationObserver) {
            new MutationObserver(i).observe(O, {
              childList: true,
              subtree: true,
              attributes: true
            });
          } else {
            O[P]("DOMNodeInserted", i, true);
            O[P]("DOMAttrModified", i, true);
            setInterval(i, 999);
          }

          q("hashchange", i, true);
          ["focus", "mouseover", "click", "load", "transitionend", "animationend"].forEach(function (e) {
            D[P](e, i, true);
          });

          if (/d$|^c/.test(D.readyState)) {
            o();
          } else {
            q("load", o);
            D[P]("DOMContentLoaded", i);
            I(o, 2e4);
          }

          if (k.elements.length) {
            t();

            ee._lsFlush();
          } else {
            i();
          }
        },
        checkElems: i,
        unveil: R,
        _aLSL: l
      };
    }(),
        re = function () {
      var i;
      var n = te(function (e, t, i, a) {
        var r, n, s;
        e._lazysizesWidth = a;
        a += "px";
        e.setAttribute("sizes", a);

        if (j.test(t.nodeName || "")) {
          r = t.getElementsByTagName("source");

          for (n = 0, s = r.length; n < s; n++) {
            r[n].setAttribute("sizes", a);
          }
        }

        if (!i.detail.dataAttr) {
          Y(e, i.detail);
        }
      });

      var a = function (e, t, i) {
        var a;
        var r = e.parentNode;

        if (r) {
          i = s(e, r, i);
          a = X(e, "lazybeforesizes", {
            width: i,
            dataAttr: !!t
          });

          if (!a.defaultPrevented) {
            i = a.detail.width;

            if (i && i !== e._lazysizesWidth) {
              n(e, r, a, i);
            }
          }
        }
      };

      var e = function () {
        var e;
        var t = i.length;

        if (t) {
          e = 0;

          for (; e < t; e++) {
            a(i[e]);
          }
        }
      };

      var t = ae(e);
      return {
        _: function () {
          i = D.getElementsByClassName(H.autosizesClass);
          q("resize", t);
        },
        checkElems: t,
        updateElem: a
      };
    }(),
        t = function () {
      if (!t.i && D.getElementsByClassName) {
        t.i = true;

        re._();

        e._();
      }
    };

    return I(function () {
      H.init && t();
    }), k = {
      cfg: H,
      autoSizer: re,
      loader: e,
      init: t,
      uP: Y,
      aC: K,
      rC: Q,
      hC: J,
      fire: X,
      gW: s,
      rAF: ee
    };
  }(e, e.document, Date);

  e.lazySizes = t,  true && module.exports && (module.exports = t);
}("undefined" != typeof window ? window : {});

/***/ }),
/* 6 */
/***/ (function(module, exports) {

const YnfiniteCookies = {
  setup() {
    document.addEventListener("DOMContentLoaded", () => {
      const manager = document.getElementById("yn-cookies");

      if (manager) {
        if (manager.dataset.hideManager !== "true") {
          this.ynCheckForCookieConsents();
        }

        document.getElementById("yn-cookies__allow-all").addEventListener("click", e => {
          e.preventDefault();
          this.ynSetDefaultCookieSettings();
        });
        document.getElementById("yn-cookies__show-configuration").addEventListener("click", e => {
          e.preventDefault();
          this.ynCookiesShowPage("configuration");
        });
        document.getElementById("yn-cookies__show-information").addEventListener("click", e => {
          e.preventDefault();
          this.ynCookiesShowPage("information");
        });
        document.getElementById("yn-cookies__set-cookies").addEventListener("click", e => {
          e.preventDefault();
          this.ynSetCookieSettings();
        });
        const changeSelectionButton = document.getElementById("yn-cookies__change-selection");
        changeSelectionButton && changeSelectionButton.addEventListener("click", e => {
          e.preventDefault();
          this.ynCookiesShowPage("configuration");
          this.showCookieConsent(true);
        });
        const consentButtons = document.querySelectorAll(".yn-cookie-consent--okay");

        for (let i = 0; i < consentButtons.length; i++) {
          let button = consentButtons[i];
          button.addEventListener("click", e => {
            e.preventDefault();
            const id = button.dataset.consentId;
            this.ynAcceptCookie(id);
          });
        }
      }
    });
  },

  showCookieConsent(hideBackButton = false) {
    const e = document.getElementById("yn-cookies");
    e && e.classList.add("yn-cookies--show");

    if (hideBackButton) {
      document.getElementById("yn-cookies__show-information").style.display = "none";
    } else {
      document.getElementById("yn-cookies__show-information").style.display = "block";
    }
  },

  hideCookieConsent() {
    const e = document.getElementById("yn-cookies");
    e && e.classList.remove("yn-cookies--show");
  },

  ynCookiesShowPage(e) {
    const t = document.querySelectorAll("[data-yn-cookie-page]");

    for (let e = 0; e < t.length; e++) t[e].classList.remove("yn-cookies__page--visible"), t[e].classList.add("yn-cookies__page--hidden");

    const n = document.querySelector(`[data-yn-cookie-page="${e}"]`);
    n && (n.classList.remove("yn-cookies__page--hidden"), n.classList.add("yn-cookies__page--visible"));
  },

  ynSetCookie(e, t, n) {
    const o = new Date();
    o.setTime(o.getTime() + 24 * n * 60 * 60 * 1e3);
    const i = `expires=${o.toUTCString()}`;
    document.cookie = `${e}=${t};${i};path=/`;
  },

  ynGetCookie(e) {
    const t = `${e}=`,
          n = decodeURIComponent(document.cookie).split(";");

    for (let e = 0; e < n.length; e++) {
      let o = n[e];

      for (; " " === o.charAt(0);) o = o.substring(1);

      if (0 === o.indexOf(t)) return o.substring(t.length, o.length);
    }

    return "";
  },

  addScripts(e, t) {
    for (let n = 0; n < t.length; n++) {
      if (!document.querySelector(`script[src="${t[n]}"]`)) {
        const o = document.createElement("script");
        o.src = t[n], e.appendChild(o);
      }
    }
  },

  ynCheckForCookieConsents() {
    const e = this.ynGetCookie("ynfinite-cookies");

    if (e) {
      !0 === JSON.parse(e).done ? this.hideCookieConsent() : this.showCookieConsent();
    } else this.showCookieConsent();
  },

  ynSetCookieSettings() {
    const e = document.querySelector("#yn-cookies-form"),
          t = {};

    if (e) {
      const n = new FormData(e);
      t.activeScripts = n.getAll("activatedScripts[]");
    }

    t.done = !0, this.ynSetCookie("ynfinite-cookies", JSON.stringify(t), 365), window.location.reload();
  },

  ynSetDefaultCookieSettings() {
    const e = document.querySelectorAll("[data-yn-cookie-settings-id] input"),
          t = {
      done: false,
      activeScripts: []
    };

    if (e.length > 0) {
      const n = [];

      for (let t = 0; t < e.length; t += 1) n.push(e[t].value);

      t.activeScripts = n;
    }

    t.done = !0, this.ynSetCookie("ynfinite-cookies", JSON.stringify(t), 365), window.location.reload();
  },

  ynAcceptCookie(e) {
    let t = this.ynGetCookie("ynfinite-cookies");
    -1 === (t = JSON.parse(t)).activeScripts.findIndex(t => t === e) && t.activeScripts.push(e), this.ynSetCookie("ynfinite-cookies", JSON.stringify(t), 365), window.location.reload();
  },

  ynDeclineCookie(e) {
    let t = this.ynGetCookie("ynfinite-cookies");
    const n = (t = JSON.parse(t)).activeScripts.findIndex(t => t === e);
    n > -1 && t.activeScripts.splice(n, 1), this.ynSetCookie("ynfinite-cookies", JSON.stringify(t), 365), window.location.reload();
  }

};
module.exports = YnfiniteCookies;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

const YnfiniteForms = {
  addChangeEvent(element) {
    for (var i = 0; i < element.elements.length; i++) {
      element.elements[i].addEventListener("change", function (e) {
        e.preventDefault();
        element.submit();
      });
    }
  },

  resetForm(element) {
    element.reset();
  },

  async submitForm(element, eventType) {
    const ynBeforeAsyncChangeData = new Event('onPreAsyncChangeData');
    element.dispatchEvent(ynBeforeAsyncChangeData);
    const formData = new FormData(element);
    formData.set("eventAsync", true);
    formData.set("eventType", eventType);
    formData.set("method", element.getAttribute("data-ynformmethod"));
    formData.set("formId", element.getAttribute("data-ynformid"));
    formData.set("formLanguage", element.getAttribute("data-language"));

    if (element.hasAttribute("data-sectionid")) {
      formData.set("sectionId", element.getAttribute("data-sectionid"));
    }

    const data = new URLSearchParams();
    const params = new URLSearchParams(window.location.search);
    const perPage = params.get("__yPerPage");

    if (perPage) {
      data.append("__yPerPage", perPage);
    }

    for (const pair of formData) {
      data.append(pair[0], pair[1]);
    }

    const ynBeforeAsyncChange = new Event('onPreAsyncChange');
    element.dispatchEvent(ynBeforeAsyncChange);
    const response = await fetch("/yn-form/send", {
      method: "POST",
      body: data
    });
    const ynAsyncChange = new CustomEvent('onAsyncChange', {
      detail: {
        response: await response.json()
      }
    });
    element.dispatchEvent(ynAsyncChange);
  },

  addAsyncChangeEvent(element) {
    const formInputElements = element.querySelectorAll("select, input");

    for (var i = 0; i < formInputElements.length; i++) {
      formInputElements[i].addEventListener("change", async e => {
        e.preventDefault();
        await this.submitForm(element, "onChange");
      });
    }
  },

  addAsyncSubmitEvent(element) {
    element.addEventListener("submit", async e => {
      e.preventDefault();
      await this.submitForm(element, "onSubmit");
    });
  },

  setup() {
    document.addEventListener("DOMContentLoaded", () => {
      const forms = document.querySelectorAll("[data-ynform=true]");
      forms.forEach(form => {
        if (form.hasAttribute("data-onchange")) {
          if (form.dataset.onchange === "async") {
            this.addAsyncChangeEvent(form);
          } else {
            this.addChangeEvent(form);
          }
        }

        if (form.hasAttribute("data-onsubmit")) {
          if (form.dataset.onsubmit === "async") {
            this.addAsyncSubmitEvent(form);
          }
        } // Handle reset action


        const resetButton = form.querySelector("button[type='reset']");

        if (resetButton) {
          resetButton.addEventListener("click", async e => {
            const formInputElements = form.querySelectorAll("select, input");

            for (var i = 0; i < formInputElements.length; i++) {
              formInputElements[i].value = "";
            }

            await this.submitForm(form);
          });
        } // Handle new form


        const newFormLink = form.querySelector(".yn-form-response__new-form");
        newFormLink.addEventListener("click", e => {
          e.preventDefault();
          this.resetForm(form);
          newFormLink.closest("form").querySelector(".form-content").classList.remove("inactive");
          newFormLink.closest(".yn-form-response").classList.remove("active");
        }); // Handle list fields

        const listFields = form.querySelectorAll(".yn-listForm-wrapper");
        listFields.forEach(listField => {
          const newAction = listField.querySelector(".yn-listForm-actions-new");
          const rowTemplate = listField.querySelector("#listField_" + listField.dataset.ynformalias);
          const dataContainer = listField.querySelector(".yn-listForm-data");
          newAction.addEventListener("click", e => {
            e.preventDefault();
            const newRow = rowTemplate.content.cloneNode(true);
            newRow.className = "yn-listForm-row";
            const deleteButton = newRow.querySelector(".yn-listForm-actions-delete");
            const fields = newRow.querySelectorAll("[data-ynfield=true]");
            fields.forEach(f => {
              f.setAttribute("name", f.name.replace("::count::", dataContainer.childElementCount));
            });
            dataContainer.appendChild(newRow);
            deleteButton.addEventListener("click", e => {
              e.preventDefault();
              const row = e.target.closest(".yn-listForm-row");
              dataContainer.removeChild(row);
            });
          });
        });
      });
    });
  },

  enableForm(form) {
    const fieldset = form.querySelector("fieldset");
    fieldset.disabled = false;
  },

  disableForm(form) {
    const fieldset = form.querySelector("fieldset");
    fieldset.disabled = true;
  },

  updateUrl(form) {
    const formData = new FormData(form);
    const data = new URLSearchParams();
    const params = new URLSearchParams(window.location.search);
    const perPage = params.get("__yPerPage");

    if (perPage) {
      data.append("__yPerPage", perPage);
    }

    for (const pair of formData) {
      if (pair[1]) {
        data.append(pair[0], pair[1]);
      }
    }

    let newHref = `${window.location.protocol}//${window.location.hostname}${window.location.pathname}`;

    if (data.toString()) {
      newHref += `?${data.toString()}`;
    }

    history.pushState({}, "", newHref);
  },

  repopulateForm(form, data) {
    const keys = Object.keys(data.fields);

    for (var i = 0; i < keys.length; i++) {
      const element = data.fields[keys[i]];
      const formElement = form.querySelector(`[name="fields[${element.alias}]"]`);
      if (!formElement) break;
      let markup = `${element.options.map(option => `<option value="${option.value}" ${option.value === element.value ? "selected" : ""}>${option.label}</option>`).join("")}`;

      if (!formElement.options[0].value) {
        markup = `<option value>${formElement.options[0].text}</option>${markup}`;
      }

      formElement.innerHTML = markup;
    }
  },

  showResponse(form, data) {
    const responseContainer = form.querySelector(".yn-form-response");
    const formContent = form.querySelector(".form-content");
    const innerContainer = responseContainer.querySelector(".yn-form-response__inner");
    formContent.classList.add("inactive");
    innerContainer.innerHTML = data.rendered;
    responseContainer.classList.add("active");
  }

};
module.exports = YnfiniteForms;

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,